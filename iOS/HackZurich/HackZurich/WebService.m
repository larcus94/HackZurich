//
//  WebService.m
//  HackZurich
//
//  Created by Patrick Amrein on 11/10/14.
//  Copyright (c) 2014 Laurin Brandner. All rights reserved.
//

#import "WebService.h"

@implementation WebService

+(WebService *) sharedService {
    static WebService * sharedService;
    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        sharedService = [WebService new];
    });
    
    return sharedService;
}


/*
 Register Function
 PRE:
 Username: the username (!!!always an E-Mailaddress !!!) used for the Webservice
 Password: Password in cleartext (Connection via https)
 PushToken (generated by the UIApplication remote thing): used for PushMessages
 
 POST:
 true if succeeded false otherwise
 the self.currentUser was not set if return value is false
 IMPORTANT: Send the auth-token in the User-INstance for every further request
 
 */

-(BOOL)registerUser:(NSString *)username withPassword:(NSString *)password andDeviceToken:(NSString *)token withCompletion:(void (^)(User *))completion {
    if (self.deviceToken == nil) {
        if (completion) {
            completion(nil);
        }
        self.currentUser = nil;
            return false;
        
    }
    
    if (completion) {
        __block User *user = nil;
        NSURLRequest * request = [NSURLRequest requestWithURL:[NSURL URLWithString:@""]];
        [[NSURLSession sharedSession] dataTaskWithRequest:request completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
            user = [[User alloc] initWithString:[[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding] error:nil];
            completion(user);
            self.currentUser = user;
            
        }];
        if(user != nil) {
        return  true;
        }
        else {
            return false;
        }
    }
    return  false;
}

/*
 Login Function
 
 PRE:
 Username: the username (!!!always an E-Mailaddress !!!) used for the Webservice
 Password: Password in cleartext (Connection via https)
 PushToken (generated by the UIApplication remote thing): used for PushMessages
 
 POST:
 true if succeeded false otherwise
  the self.currentUser was not set if return value is false
 IMPORTANT: Send the auth-token in the User-INstance for every further request
 */
-(BOOL) login:(NSString *)username withPassword:(NSString *)password andPushToken:(NSString *)token withCompletion:(void (^)(User *))completion {
    
    if(self.deviceToken == nil) {
        if(completion) {
            completion(nil);
        }
        self.currentUser = nil;
        return false;
    }
    
    if(completion) {
        __block User *user = nil;
        NSURLRequest *request = [NSURLRequest requestWithURL:[NSURL URLWithString:@""]];
        [[NSURLSession sharedSession] dataTaskWithRequest:request completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
            user = [[User alloc] initWithString:[[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding] error:nil];
            completion(user);
            self.currentUser = user;
        }];
        if(user != nil) {
            return true;
        }
        else {
            return false;
        }
        
    }
    return  false;
}


/*
 Create New Input Feed
 IMPORTANT NO FILTER FOR INPUTFEED
 PRE:
 Name: A name for the feed
 Description: Describe the way your feed is acting on the input
 Uri: Pointer to a online ressource of an ICS file
 [OPTIONAL] Filter: The Filter rules including the included InputFeeds (DO NOT SET FOR INPUTFEED!!!)
 
 POST:
true if succeeded false otherwise
 */
-(BOOL)createNewFeedWithName:(NSString *) name withDescription:(NSString *)desc withFilters:(NSArray<Filter> *)filters withCompletion:(void(^)(Feed *)) completion {
    if(self.currentUser == nil) {
        if(completion) {
            completion(nil);
        }
        return false;
        
    }
    if(completion) {
        __block Feed *feed = nil;
        NSURLRequest *request = [NSURLRequest requestWithURL:[NSURL URLWithString:@""]];
        [[NSURLSession sharedSession] dataTaskWithRequest:request completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
            feed = [[Feed alloc] initWithString:[[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding] error:nil];
            completion(feed);
        }];
        if(feed != nil) {
            return true;
        }
        else {
            return true;
        }
    }
    return  false;
}



@end

//
//  WebService.h
//  HackZurich
//
//  Created by Patrick Amrein on 11/10/14.
//  Copyright (c) 2014 Laurin Brandner. All rights reserved.
//

#import <Foundation/Foundation.h>
#import "User.h"
#import "Feedstream.h"

@class Feed;
@protocol Feed;

@interface WebService : NSObject

+(WebService *) sharedService;

@property (strong, nonatomic) NSString *deviceToken;
@property (strong, nonatomic) User *currentUser;
@property (strong, nonatomic) NSArray<Feed> *feeds;

//WebService Implementations

/*
 Register Function
PRE: 
        Username: the username (!!!always an E-Mailaddress !!!) used for the Webservice
        Password: Password in cleartext (Connection via https)
        PushToken (generated by the UIApplication remote thing): used for PushMessages
 
 POST: null or a User Objective representing the user which is logged in
 IMPORTANT: Send the auth-token in the User-INstance for every further request
 
*/

-(BOOL)registerUser:(NSString *)username withPassword:(NSString *)password withCompletion:(void (^)(User*, NSString*))completion;

/*
 Login Function

 PRE:
        Username: the username (!!!always an E-Mailaddress !!!) used for the Webservice
        Password: Password in cleartext (Connection via https)
        PushToken (generated by the UIApplication remote thing): used for PushMessages
 
 POST: null or a User Objective representing the user which is logged in
        IMPORTANT: Send the auth-token in the User-INstance for every further request
 */
-(BOOL)login:(NSString *)username withPassword:(NSString*)password  withCompletion:(void(^)(User *, NSString*)) completion;



/*
 Create New Input Feed
 IMPORTANT NO FILTER FOR INPUTFEED
 PRE:
        Name: A name for the feed
        Description: Describe the way your feed is acting on the input
        Uri: Pointer to a online ressource of an ICS file
        [OPTIONAL] Filter: The Filter rules including the included InputFeeds (DO NOT SET FOR INPUTFEED!!!)
 
 POST:
 Null or generated Feed Object
 */
-(BOOL)createNewFeed:(Feed *) injFeed withCompletion:(void(^)(Feed *)) completion;


/*
 Update Feed
PRE:
    Id: Feed id which should be updated
    Name: A name for the feed
    Description: Describe the way your feed is acting on the input
    Uri: Pointer to a online ressource of an ICS file
    [OPTIONAL] Filter: The Filter rules including the included InputFeeds (DO NOT SET FOR INPUTFEED!!!)
 
 */
-(BOOL)updateFeed:(Feed *)injFeed withCompletion:(void(^)(Feed *)) completion;


///*
// Update Feedstream
// PRE: Updated list of all feeds used (wanted) by the user
// 
// POST:
//    Boolean indicating status
// 
// */
//-(BOOL)updateFeedstreamWithCompletion:(void (^)(Feedstream *)) completion;

/*
 Get Feedstream
 NOTE: Getting the auth token from the currentUser property
 
 PRE:
        Completion Handler
 
 POST:
        NSArray<Feed> (List of feeds, mixed input and outputfeeds)
*/
-(BOOL)getListFeedWithCompletion:(void(^)(NSArray<Feed> *)) completion;


/*
 Delete Feed
 PRE:
    Fedd which should be deleted
 
 POST
    Boolean if success
 */

-(BOOL)deleteFeed:(Feed *)feed withCompletion:(void(^)(BOOL)) completion;

/*
 Get the request string (URL)
 PRE:
        parameter: the request operation

 POST:
        the url prepared
 
 */
-(NSString *) getRequestWithOperation:(NSString *) parameter;

/*
 Create a MutableURLRequest with given method and given data as string
 PRE
        Method: representing the REST-Method for the HTTP Request
        Data: Either a string concated to the url (GET) or a Json-Object (POST)
 
 POST
        The created MutableURLREquest
 
 */

-(NSMutableURLRequest *) createMutableRequestWithMethod:(NSString *)method withOperation:(NSString *)operation  andDataAsString:(NSString *)data;

//same as above but with NSData,a allready serialized json object

-(NSMutableURLRequest *) createMutableRequestWithMethod:(NSString *)method withOperation:(NSString *)operation  andData:(NSData *)data;



-(void)giveMeASync:(void(^)(void)) completion;

@end
